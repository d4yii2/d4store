<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d4yii2\d4store\models\base;

use Yii;


/**
 * This is the base-model class for table "d4store_stack".
 *
 * @property integer $id
 * @property integer $store_id
 * @property string $name
 * @property string $notes
 * @property integer $active
 *
 * @property \d4yii2\d4store\models\D4StoreAction[] $d4StoreActions
 * @property \d4yii2\d4store\models\D4StoreStore $store
 * @property string $aliasModel
 */
abstract class D4StoreStack extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'd4store_stack';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['store_id'], 'required'],
            'tinyint Unsigned' => [['active'],'integer' ,'min' => 0 ,'max' => 255],
            'smallint Unsigned' => [['id','store_id'],'integer' ,'min' => 0 ,'max' => 65535],
            [['notes'], 'string'],
            [['name'], 'string', 'max' => 255],
            [['store_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d4yii2\d4store\models\D4StoreStore::className(), 'targetAttribute' => ['store_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d4store', 'ID'),
            'store_id' => Yii::t('d4store', 'Store'),
            'name' => Yii::t('d4store', 'Stack name'),
            'notes' => Yii::t('d4store', 'Notes'),
            'active' => Yii::t('d4store', 'Active'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints(): array
    {
        return array_merge(parent::attributeHints(), [
            'store_id' => Yii::t('d4store', 'Store'),
            'name' => Yii::t('d4store', 'Stack name'),
            'notes' => Yii::t('d4store', 'Notes'),
            'active' => Yii::t('d4store', 'Active'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getD4StoreActions()
    {
        return $this->hasMany(\d4yii2\d4store\models\D4StoreAction::className(), ['stack_id' => 'id'])->inverseOf('stack');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStore()
    {
        return $this->hasOne(\d4yii2\d4store\models\D4StoreStore::className(), ['id' => 'store_id'])->inverseOf('d4StoreStacks');
    }


    
    /**
     * @inheritdoc
     * @return \d4yii2\d4store\models\D4StoreStackQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \d4yii2\d4store\models\D4StoreStackQuery(get_called_class());
    }

}
