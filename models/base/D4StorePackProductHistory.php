<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d4yii2\d4store\models\base;

use Yii;
use d3system\behaviors\D3DateTimeBehavior;

/**
 * This is the base-model class for table "d4store_pack_product_history".
 *
 * @property integer $id
 * @property integer $pack_product_id
 * @property integer $store_product_id
 * @property integer $pack_id
 * @property string $action
 * @property string $time
 * @property integer $user_id
 *
 * @property \d4yii2\d4store\models\D4storePacks $pack
 * @property \d4yii2\d4store\models\D4storePackProduct $packProduct
 * @property \d4yii2\d4store\models\D4storeStoreProduct $storeProduct
 * @property string $aliasModel
 */
abstract class D4StorePackProductHistory extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    public const ACTION_ADD = 'Add';
    public const ACTION_REMOVED = 'Removed';
    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'd4store_pack_product_history';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = [
        ];
        $behaviors = array_merge(
            $behaviors,
            D3DateTimeBehavior::getConfig(['time'])
        );
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['pack_product_id', 'store_product_id', 'pack_id', 'action', 'time'], 'required'],
            'enum-action' => ['action', 'in', 'range' => [
                    self::ACTION_ADD,
                    self::ACTION_REMOVED,
                ]
            ],
            'integer Unsigned' => [['id','pack_product_id','store_product_id','pack_id','user_id'],'integer' ,'min' => 0 ,'max' => 4294967295],
            [['action'], 'string'],
            [['time'], 'safe'],
            [['pack_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d4yii2\d4store\models\D4storePacks::className(), 'targetAttribute' => ['pack_id' => 'id']],
            [['pack_product_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d4yii2\d4store\models\D4storePackProduct::className(), 'targetAttribute' => ['pack_product_id' => 'id']],
            [['store_product_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d4yii2\d4store\models\D4storeStoreProduct::className(), 'targetAttribute' => ['store_product_id' => 'id']],
            'D3DateTimeBehavior' => [['time_local'],'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d4store', 'ID'),
            'pack_product_id' => Yii::t('d4store', 'Pack Product ID'),
            'store_product_id' => Yii::t('d4store', 'Store Product ID'),
            'pack_id' => Yii::t('d4store', 'Pack ID'),
            'action' => Yii::t('d4store', 'Action'),
            'time' => Yii::t('d4store', 'Time'),
            'user_id' => Yii::t('d4store', 'User ID'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPack()
    {
        return $this->hasOne(\d4yii2\d4store\models\D4storePacks::className(), ['id' => 'pack_id'])->inverseOf('d4StorePackProductHistories');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPackProduct()
    {
        return $this->hasOne(\d4yii2\d4store\models\D4storePackProduct::className(), ['id' => 'pack_product_id'])->inverseOf('d4StorePackProductHistories');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStoreProduct()
    {
        return $this->hasOne(\d4yii2\d4store\models\D4storeStoreProduct::className(), ['id' => 'store_product_id'])->inverseOf('d4StorePackProductHistories');
    }


    
    /**
     * @inheritdoc
     * @return \d4yii2\d4store\models\D4StorePackProductHistoryQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \d4yii2\d4store\models\D4StorePackProductHistoryQuery(get_called_class());
    }


    /**
     * get column action enum value label
     * @param string $value
     * @return string
     */
    public static function getActionValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsAction();
        return $labels[$value] ?? $value;
    }

    /**
     * column action ENUM value labels
     * @return string[]
     */
    public static function optsAction(): array
    {
        return [
            self::ACTION_ADD => Yii::t('d4store', 'Add'),
            self::ACTION_REMOVED => Yii::t('d4store', 'Removed'),
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isActionAdd(): bool
    {
        return $this->action === self::ACTION_ADD;
    }

     /**
     * @return void
     */
    public function setActionAdd(): void
    {
        $this->action = self::ACTION_ADD;
    }
    /**
     * @return bool
     */
    public function isActionRemoved(): bool
    {
        return $this->action === self::ACTION_REMOVED;
    }

     /**
     * @return void
     */
    public function setActionRemoved(): void
    {
        $this->action = self::ACTION_REMOVED;
    }
}
